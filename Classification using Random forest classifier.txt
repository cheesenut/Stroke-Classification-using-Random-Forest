from pandas import Series, DataFrame
import pandas as pd
import numpy as np
import os
import matplotlib.pylab as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import classification_report
import sklearn.metrics
from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from collections import Counter
from sklearn.datasets import make_classification
from imblearn.over_sampling import SMOTE, ADASYN,RandomOverSampler
from sklearn.metrics import accuracy_score
import seaborn as sn
from sklearn.model_selection import KFold
import matplotlib.pyplot as plt
from sklearn import metrics

data = pd.read_csv("StrokeData.csv")
print(data.shape)
data.isnull().sum()

df = data.drop(data.columns[[0]], axis=1)
print(df)

print(df.shape)
df.isnull().sum()

df.isnull().sum()
data_clean = df.dropna()
data_clean.describe()
print(data_clean.shape)
data_clean.isnull().sum()
print(data_clean)

num_of_numerical_cols = data_clean._get_numeric_data().columns.shape[0]
print(num_of_numerical_cols, 'numerical columns')
name_of_numerical_cols = data_clean._get_numeric_data().columns
print(name_of_numerical_cols)

data_column_category = data_clean.select_dtypes(exclude=[np.number]).columns
data_column_category

data_clean[data_column_category].head() 

label_encoder = LabelEncoder()
for i in data_column_category:
    data_clean[i] = label_encoder.fit_transform(data_clean[i])
print("Label Encoded Data: ")
print(data_clean)

X = data_clean.iloc[:, :-1]
y = data_clean.iloc[:, -1]
sm = SMOTE(random_state=42)
x_res, y_res = sm.fit_resample(X, y)
X_train, X_test, y_train, y_test = train_test_split(
    x_res, y_res, test_size=0.1, random_state=0)

model = RandomForestClassifier(n_estimators=32, criterion='entropy', random_state=1)
model.fit(X_train, y_train)
y_pred=model.predict(X_test)

scores = cross_val_score(model,X_test,y_test, cv = 10)
avg_scores = np.mean(scores)
print('Accuracy: ',avg_scores)
confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])
sn.heatmap(confusion_matrix, annot=True)
conf_matrix_list_arrays = []